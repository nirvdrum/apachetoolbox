# WhereTheHell , used to find needed external programs like tar, var1 is
# the variable name to set if the program (var2) is found, if var3 is
# set, and the program isn't found, exit with errorlevel 1

wth()
	{
		notice $MENUTRUE " -Checking for $2..."

		#watch the order, /opt/sfw/bin is last for the gnu package in solaris, thx to Michael Kummer for the patches
		test -x $2 && export "$1"="$2"
		test -x /bin/$2 && export "$1"="/bin/$2"
		test -x /sbin/$2 && export "$1"="/sbin/$2"
		test -x /usr/bin/$2 && export "$1"="/usr/bin/$2"
		test -x /usr/sbin/$2 && export "$1"="/usr/sbin/$2"
		test -x /usr/local/bin/$2 && export "$1"="/usr/local/bin/$2"
		test -x /usr/local/sbin/$2 && export "$1"="/usr/local/sbin/$2"
		test -x $LOCAL_PATH/bin/$2 && export "$1"="$LOCAL_PATH/bin/$2"
		test -x /opt/sfw/bin/$2 && export "$1"="/opt/sfw/bin/$2"

		# pipe the var passed to this function, that was used to make a var, into sh to test the existing external var *gasp*
		if [ `echo echo '$'$1'' |  /bin/sh` ]; then
		 echo " [$FOUND @ `echo echo '$'$1'' |  /bin/sh`] "
		else
		 echo -e " [$FAILED]\c"
		 if [ $3 ]; then 
			echo " -required external resourced missing"
			exit 1
		 else
			echo
		 fi
		fi
	}

#compressed menu item for more room
comp_menu_item()
	{
		echo -e "[\c";
		pretty_menu "$2";
		echo -e "] \c";

		test $ATB_COLOR -eq $TRUE && echo -e "[01;34m\c";
		echo -e "$1\c";
		test $ATB_COLOR -eq $TRUE && echo -e "[00m\c";
		echo -e ") $3\c";
	}
 
sub_menu_item()
	{
 		echo -e "\t[\c"
  		pretty_menu "$2"
 		echo -e "] $1)\t   $3\c";
	}

#used to format all output from the modules in a uniform format
notice()
	{
 		echo -e "[$1] $2\c"
	}

# show's a menu item 
menu_item()
	{
		echo -e "\t[\c"
		pretty_menu "$2"
		echo -e "] $1)\t$3\n\c"
	}


# this is used because of the : vs. . battle. arg1 is the user, arg2 is the group, arg3 is the target
changeowner()
	{
		if [ $OS = "SunOS" ]; then 
			$CHOWN -R $1:$2 "$3"
		else
			$CHOWN -R $1.$2 "$3"
		fi
	}

# test the errorlevel to see if the last command was successful, var2 is the log
# to point the user to if there was an error 
testcheck()
	{
		if [ $1 -ne 0 ];then
			if [ "$ATB_COLOR" = "$TRUE" ];then
				notice "$MENUFALSE" " [01;05;37;41m*****${2} FAILED!******[00m\n\n\nCheck in \"$logdir/${2}\" for errors.\n\n"
			else
				notice "$MENUFALSE" " *****${2} FAILED!******\n\n\nCheck in \"$logdir/${2}\" for errors.\n\n"
			fi
			exit $1
		fi
	}


#test var1 to see if the rpm is installed
rpmtest()
	{
		echo -e "Testing for $2 RPM...\c"
		test=`cat $root/etc/rpm.tmp |grep $1`
		if [ $test ]; then
			echo "  found! Please remove the rpm. EG: rpm -e $test"
			rpm=1
		else
			echo " not found."
		fi
	}

#runs a command locally, using installwatch is it's available to log everything
localcopy()
	{
		if [ "$installwatch" -eq "$TRUE" ]; then
			$root/bin/atb/installwatch.sh -o $logdir/$1.iw "$2" &> $logdir/$1.log
		else
			$2 &> $logdir/$1.log
		fi
	}

#runs make install with installwatch if available
inst()
	{
		if [ "$installwatch" -eq "$TRUE" ];then
			$root/bin/atb/installwatch.sh -o $logdir/$1.iw $MAKE install &> $logdir/$1-install.log
			testcheck $? $1-install.log
		else
			$MAKE install &> $logdir/$1-install.log
			testcheck $? $1-install.log
		fi
	}

#test tarballs for corruption and uncompress if its ok
explode()
	{
 		notice "$MENUTRUE" "  Testing $1 for corruption... "

		if [ ! -z "$MD5SUM" ]; then
			MD5_TMP=`grep $1 ${MD5FILE}`
			if [ ! -z "$MD5_TMP" ]; then
				echo "$MD5_TMP" | $MD5SUM -c
			fi
		fi

		if [ -z "$MD5_TMP" ];then
			$GUNZIP -t $1 &>/dev/null
 			if [ $? -eq 1 ];then
  				echo "[CORRUPT!]"
  				exit 1
 			else
   				echo "[$PASSED]"
 			fi
		fi

		unset MD5_TMP
 		$GUNZIP -q < $1 | $TAR xf -
	}

# echo something
say()
	{
 		echo -e "$1\c"
	}

# duh
echo_line()
	{
		echo "-----------------------------------------------------------------------"
	}

# see above
HitAnyKey() 
	{
        	default="Press Enter to continue"
        	echo -e "$default\c"
        	read tmp_strike   
	}

#shows the help file for all the mods
print_descriptions() 
	{
		$LESS $root/etc/help
		echo "See $root/etc/help for more info."
	}

#YN question
IsYN()
	{
    		VALID_YN=$FALSE
    		YN=
    		rval=
    		echo -e " [y/n] \c"
    		read YN
    		if [ -z "$YN" ]
    		then
        		VALID_YN=$FALSE
        		rval=$INVALID  
    		else
        		case "$YN" in
        			[Yy]*)
            				VALID_YN=$TRUE
            				rval=$YES
            				;;
        			[Nn]*)
            				VALID_YN=$TRUE
            				rval=$NO
            				;;
        			[Aa][Ll][Ll]*)
            				VALID_YN=$TRUE
            				rval=$YES
            				JUSTDL=$TRUE
            				;;
        			*)
            				VALID_YN=$FALSE
            				rval=$INVALID  
            				;;
        		esac  
    		fi
    		if [ $rval -eq $INVALID ]
    		then
        		echo "Invalid Response..."
    		fi
    		return $rval
	}
 

#used to turn off/on menu items
test_choice()
	{
 		var="$1"
 		test="$2"
 		if [ "$test" -eq "$TRUE" ]; then
  			var=$FALSE
 		else
  			var=$TRUE
 		fi
 		return $var
	}

#banner for the top of the menu's 
banner() 
	{
 		echo_line 
 		echo "                       Apache Toolbox $SCRIPTVERSION"
 		echo "             Support: http://www.apachetoolbox.com"  
 		echo_line
	}

#to format a menu item
pretty_menu()
	{
		if [ "$ATB_COLOR" = "$TRUE" ];then
			if [ "$1" -eq "1" ]; then
			 #echo -e "^[[01;32m\c";
			 echo -e "$MENUTRUE\c";
			 #echo -e "^[[00m\c";
			else
			 #echo -e "^[[01;32m\c";
			 echo -e "$MENUFALSE\c";
			 #echo -e "^[[00m\c";
			fi
		else
			if [ "$1" -eq "1" ]; then
			 echo -e "$MENUTRUE\c"
			else
			 echo -e "$MENUFALSE\c"
			fi
		fi
	} 
  
#just a good old fasion tab to format the menus  
TAB()
	{
 		echo -e "\t\c"
	}

# YN loop
IsYNLoop()
	{
    		rval=$INVALID
    		query_string="$1"
    		valid_response=$FALSE
    		while [ $valid_response -eq $FALSE ];do
        		say "$query_string"
        		IsYN
        		rval=$?
        		case "$rval" in
            			$YES|$NO)
                			valid_response=$TRUE
                			;;
            			all)
                			valid_response=$TRUE
                			;;
        		esac
    		done
    		return $rval
	}

#check to see if var1 exists, if not download it from var2, var2 is a full url
check_source()
	{
		if [ ! -f $1 ];then
        		notice "$MENUFALSE" "$1 detection failed\n"
        		if [ "$JUSTDL" = "$TRUE" ]; then
				$WGET $WGETOPTIONS "$2"
 				if [ ! -f $1 ]; then
  					echo_line
  					echo "Error retreiving $1, trying to download it from apachetoolbox.com this time..."
  					$WGET $WGETOPTIONS "http://www.apachetoolbox.com/data/cvs/src/`basename $2`"
 				fi
 				if [ ! -f $1 ]; then echo "Error retreiving $1."; exit 1; fi
 			else
				IsYNLoop "Do you wish to download it now? [all]"
        			case "$?" in
            				$NO)
                				exit 1
                				;;
            				$YES)
						$WGET $WGETOPTIONS "$2"
                				;;
            				[Aa][Ll][lL])
						$WGET $WGETOPTIONS "$2"
                				JUSTDL=$TRUE
                				;;
        			esac
        			if [ ! -f $1 ]; then
        				echo_line
        				echo -e "Error retreiving $1, trying to leech it from apachetoolbox.com this time...\n"
        				$WGET $WGETOPTIONS http://www.apachetoolbox.com/data/cvs/src/`basename $2`
        			fi
          
        			if [ ! -f $1 ]; then
        				echo "Error retreiving $1."
        				exit 1
        			fi
			fi
		else
        		notice "$MENUTRUE" " $1 detection successful$n"
		fi
  	}


